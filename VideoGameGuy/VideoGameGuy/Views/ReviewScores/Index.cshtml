@model VideoGameGuy.Data.ReviewScoresViewModel

@{
    ViewData["Title"] = "Review Scores";
}

<link rel="stylesheet" href="~/css/review_scores.css" asp-append-version="true" />

<div id="reviewScores_Grid" class="non-highlightable">

    @* Games *@
    <div id="games_Grid">

        @* Game One *@
        <div id="gameOne_Grid" class="dim-container">

            @* Splash *@
            <div class="gameSplash_Container">
                <button id="gameOneButton" class="gameSplash_Button" style="background-image: url('@Model.GameOneImageUri');"></button>
                <input id="gameOneId" type="hidden" name="gameOneId" value="@Model.CurrentRound?.GameOneId" />
            </div>

            @* Title *@
            <div class="gameTitle">
                @Model.GameOneName
            </div>

            @* Game Score *@
            <div id="gameOne_Score" class="gameScore">
                [Score]
            </div>

            @* Result Icon *@
            <div class="choiceResult_Container">
                <i id="gameOne_CorrectIcon" class="fa-solid fa-check fa-8x" style="color: #33ff55; display: none;"></i>
                <i id="gameOne_IncorrectIcon" class="fa-solid fa-x fa-8x" style="color: #e82626; display: none;"></i>
            </div>

            @* Outlet Scores *@
            <div id="gameOneOutletScores_Container">

                @* Metacritic Score *@
                <div id="gameOne_Metacritic_Score" class="outletScore">
                    [Metacritic Score]
                </div>

                @* User Score *@
                <div id="gameOne_User_Score" class="outletScore">
                    [User Score]
                </div>

            </div>

            @* Shadow *@
            <div id="gameOne_gridShadow"></div>
        </div>

        @* Center Module *@
        <div id="centerModule_Container">
            <a id="centerButton" class="color_gray_flat" href="/ReviewScores">
                OR
            </a>

            <div id="streak_Container">
                <input id="currentStreakVal" type="hidden" name="streak" value="@Model.Streak" />
                <input id="highestStreakVal" type="hidden" name="highest" value="@Model.HighestStreak" />
                <div id="currentStreak" class="currentStreak">Streak: @Model.Streak</div>
                <div id="highestStreak" class="highestStreak">Highest: @Model.HighestStreak</div>
            </div>
        </div>

        @* Game Two *@
        <div id="gameTwo_Grid" class="dim-container">

            @* Splash *@
            <div class="gameSplash_Container">
                <button id="gameTwoButton" class="gameSplash_Button" style="background-image: url('@Model.GameTwoImageUri');"></button>
                <input id="gameTwoId" type="hidden" name="gameTwoId" value="@Model.CurrentRound?.GameTwoId" />
            </div>

            @* Title *@
            <div class="gameTitle">
                @Model.GameTwoName
            </div>

            @* Game Score *@
            <div id="gameTwo_Score" class="gameScore">
                [Score]
            </div>

            @* Result Icon *@
            <div class="choiceResult_Container">
                <i id="gameTwo_CorrectIcon" class="fa-solid fa-check fa-8x" style="color: #33ff55; display: none;"></i>
                <i id="gameTwo_IncorrectIcon" class="fa-solid fa-x fa-8x" style="color: #e82626; display: none;"></i>
            </div>

            @* Outlet Scores *@
            <div id="gameTwoOutletScores_Container">

                @* Metacritic Score *@
                <div id="gameTwo_Metacritic_Score" class="outletScore">
                    [Metacritic Score]
                </div>

                @* User Score *@
                <div id="gameTwo_User_Score" class="outletScore">
                    [User Score]
                </div>

            </div>

            @* Shadow *@
            <div id="gameTwo_gridShadow"></div>
        </div>

        @* Footer *@
        <div id="reviewScores_Footer">
            <div id="updatedOn">
                Last updated @Model.LastUpdateOn.ToShortDateString()
            </div>

            <div id="dataSource">
                Data made available by <a href="http://Rawg.io">Rawg.io</a>
            </div>
        </div>

    </div>
</div>

@* JS *@
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
        $('#gameOneButton').click(function () {
            let gameOneId = $('#gameOneId').val();
            let currentStreak = parseInt($('#currentStreakVal').val());
            let highestStreak = parseInt($('#highestStreakVal').val());

            $.ajax({
                type: 'POST',
                url: '/ReviewScores/UserVote',
                data: { userChoiceId: gameOneId },
                success: function (data) {
                    if (data !== null) {
                        if (data.winningGameId == gameOneId) {
                            $('#gameOne_CorrectIcon').css('display', 'block');
                            $('#gameOne_gridShadow').addClass('gridShadow_Green');
                          
                            currentStreak = currentStreak + 1;
                            $('#currentStreak').text("Streak: " + currentStreak);

                            if (currentStreak > highestStreak) {
                                $('#highestStreak').text("Highest: " + currentStreak);
                            }
                        }
                        else {
                            $('#gameOne_IncorrectIcon').css('display', 'block');
                            $('#gameOne_gridShadow').addClass('gridShadow_Red');

                            currentStreak = 0;
                            $('#currentStreak').text("Streak: " + currentStreak);
                        }

                        $('#gameOne_Grid').removeClass('dim-container');
                        $('#gameTwo_Grid').removeClass('dim-container');

                        $('#gameOneButton').prop('disabled', true);
                        $('#gameTwoButton').prop('disabled', true);

                        $('#gameOne_Score').text(data.gameOneScore);
                        $('#gameOne_Metacritic_Score').text('Metacritic Score: ' + data.gameOneMetacriticScore);
                        $('#gameOne_User_Score').text('User Score: ' + data.gameOneUserScore);
                        $('#gameOne_Score').css('display', 'block');
                        $('#gameOneOutletScores_Container').css('display', 'block');

                        $('#gameTwo_Score').text(data.gameTwoScore);
                        $('#gameTwo_Metacritic_Score').text('Metacritic Score: ' + data.gameTwoMetacriticScore);
                        $('#gameTwo_User_Score').text('User Score: ' + data.gameTwoUserScore);
                        $('#gameTwo_Score').css('display', 'block');
                        $('#gameTwoOutletScores_Container').css('display', 'block');

                        $('#centerButton').text("NEXT");
                        $('#centerButton').css('pointer-events', 'auto');
                        $('#centerButton').removeClass('color_gray_flat');
                        $('#centerButton').addClass('color_purple');
                    }
                }
            });
        });

        $('#gameTwoButton').click(function () {
            let gameTwoId = $('#gameTwoId').val();
            let currentStreak = parseInt($('#currentStreakVal').val());
            let highestStreak = parseInt($('#highestStreakVal').val());

            $.ajax({
                type: 'POST',
                url: '/ReviewScores/UserVote',
                data: { userChoiceId: gameTwoId },
                success: function (data) {
                    if (data !== null) {
                        if (data.winningGameId == gameTwoId) {
                            $('#gameTwo_CorrectIcon').css('display', 'block');
                            $('#gameTwo_gridShadow').addClass('gridShadow_Green');

                            currentStreak = currentStreak + 1;
                            $('#currentStreak').text("Streak: " + currentStreak);
                            
                            if (currentStreak > highestStreak) {
                                $('#highestStreak').text("Highest: " + currentStreak);
                            }
                        }
                        else {
                            $('#gameTwo_IncorrectIcon').css('display', 'block');
                            $('#gameTwo_gridShadow').addClass('gridShadow_Red');

                            currentStreak = 0;
                            $('#currentStreak').text("Streak: " + currentStreak);
                        }

                        $('#gameOne_Grid').removeClass('dim-container');
                        $('#gameTwo_Grid').removeClass('dim-container');

                        $('#gameOneButton').prop('disabled', true);
                        $('#gameTwoButton').prop('disabled', true);

                        $('#gameOne_Score').text(data.gameOneScore);
                        $('#gameOne_Metacritic_Score').text('Metacritic Score: ' + data.gameOneMetacriticScore);
                        $('#gameOne_User_Score').text('User Score: ' + data.gameOneUserScore);
                        $('#gameOne_Score').css('display', 'block');
                        $('#gameOneOutletScores_Container').css('display', 'block');

                        $('#gameTwo_Score').text(data.gameTwoScore);
                        $('#gameTwo_Metacritic_Score').text('Metacritic Score: ' + data.gameTwoMetacriticScore);
                        $('#gameTwo_User_Score').text('User Score: ' + data.gameTwoUserScore);
                        $('#gameTwo_Score').css('display', 'block');
                        $('#gameTwoOutletScores_Container').css('display', 'block');

                        $('#centerButton').text("NEXT");
                        $('#centerButton').css('pointer-events', 'auto');
                        $('#centerButton').removeClass('color_gray_flat');
                        $('#centerButton').addClass('color_purple');
                    }
                }
            });
        });

        function roundCarousel_slideChanged(args) {
            // Your logic here
            console.log("Carousel item changed:", args);
        }
</script>

